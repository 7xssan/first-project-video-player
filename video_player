try:
    from tkinter import *
    import tkinter.scrolledtext as tkst
    import font_manager as fonts
    import video_library as lib
    from tkinter import messagebox
    import time
except ImportError as err:
    print(err)


def set_text(text_area, content):  # function to insert content into text area
    text_area.delete("1.0", END)  # content from beginning to end is deleted
    text_area.insert(1.0, content)  # new content inserted


# this function loops through the dictionary gets the video info and
# stores in a string and after loop is finished writes it to the csv file
def update_csv():
    string = ""
    for key in lib.library:
        name = lib.get_name(key)
        director = lib.get_director(key)
        rating = lib.get_rating(key)
        string += f"{key},{name},{director},{rating}\n"
        with open("Videos.csv", "w", newline="") as f:
            f.write(string)


class SampleApp(Tk):

    def __init__(self, *args, **kwargs):
        Tk.__init__(self, *args, **kwargs)

        fonts.configure()

        container = Frame(self)
        container.pack(side="top", fill="both", expand=True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frames = {}
        for F in (StartPage, Menu, CheckVideos, UpdateVideos, CreateVideoList):
            page_name = F.__name__
            frame = F(parent=container, controller=self)
            self.frames[page_name] = frame

            # all pages placed in  same location;
            # the frame at the top of the stack
            # will be visible
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame("StartPage")

    def show_frame(self, page_name):
        """Show a frame for the given page name"""
        frame = self.frames[page_name]
        frame.tkraise()


class StartPage(Frame):
    try:
        def __init__(self, parent, controller):
            Frame.__init__(self, parent, bg='#3d3d5c')  # setting background for initialised class
            self.controller = controller
            self.controller.title('Video Player')  # window title name
            self.controller.state('zoomed')  # opens code as full screen
            self.controller.iconphoto(False, PhotoImage(file="images/play.png"))  # icon at the title bar

            heading_label = Label(self, text='Video Player', font=('orbitron', 45, 'bold'), foreground='#ffffff',
                                  background='#3d3d5c')
            heading_label.pack(pady=25)

            space_label = Label(self, height=4, bg='#3d3d5c')
            space_label.pack()

            password_label = Label(self, text='Enter your password', font=('orbitron', 13), bg='#3d3d5c', fg='white')
            password_label.pack(pady=10)

            my_password = StringVar()
            password_entry_box = Entry(self, textvariable=my_password, font=('orbitron', 12), width=22)

            password_entry_box.focus_set()
            password_entry_box.pack(ipady=7)

            # function which shows text in password box as *
            def handle_focus_in(_):
                password_entry_box.configure(fg='black', show='*')

            password_entry_box.bind('<FocusIn>', handle_focus_in)

            # function to check password and empty box after successful
            def check_password():
                if my_password.get() == '123':
                    my_password.set('')
                    incorrect_password_label['text'] = ''
                    controller.show_frame('Menu')
                # displays text when password is incorrect
                else:
                    incorrect_password_label['text'] = 'Incorrect Password'

            enter_button = Button(self, text="Enter", command=check_password, relief="raised", borderwidth=3, width=40,
                                  height=3)
            enter_button.pack(pady=10)

            incorrect_password_label = Label(self, text="", font=("orbitron", 13), fg="white", bg="#33334d", anchor="n")
            incorrect_password_label.pack(fill="both", expand=True)

            # frame at the bottom
            bottom_frame = Frame(self, relief="raised", borderwidth=3)
            bottom_frame.pack(fill='x', side="bottom")

            # getting images and storing them in labels
            youtube_icon = PhotoImage(file="images/youtube.png")
            youtube_label = Label(bottom_frame, image=youtube_icon)
            youtube_label.pack(side="left")
            youtube_label.image = youtube_icon

            netflix_icon = PhotoImage(file="images/netflix.png")
            netflix_label = Label(bottom_frame, image=netflix_icon)
            netflix_label.pack(side="left")
            netflix_label.image = netflix_icon
            video_player_icon = PhotoImage(file="images/video-player.png")

            video_player_label = Label(bottom_frame, image=video_player_icon)
            video_player_label.pack(side="left")
            video_player_label.image = video_player_icon

            def tick():
                current_time = time.strftime("%H:%M").lstrip("0").replace(" 0", " ")
                time_label.config(text=current_time)
                time_label.after(200, tick)

            time_label = Label(bottom_frame, font=("orbitron", 12))
            time_label.pack(side="right")

            tick()
    except:
        messagebox.showinfo(f"Error: could not contruct GUI")


class Menu(Frame):
    try:
        def __init__(self, parent, controller):
            Frame.__init__(self, parent, bg="#3d3d5c")
            self.controller = controller

            heading_label = Label(self, text="Video Player", font=("orbitron", 45, "bold"), foreground="white",
                                  background="#3d3d5c")
            heading_label.pack(pady=25)

            main_menu_lbl = Label(self, text="Main Menu", font=("orbitron", 15, "bold"), foreground="white",
                                  background="#3d3d5c")
            main_menu_lbl.pack()

            header_lbl1 = Label(self, text="Please make a selection", font=("orbitron", 15, "bold"), fg="white",
                                bg="#3d3d5c", anchor="w")
            header_lbl1.pack(fill="x")

            button_frame = Frame(self, bg="#33334d")
            button_frame.pack(fill="both", expand=True)

            def check_videos():
                controller.show_frame("CheckVideos")

            check_videos_btn = Button(button_frame, text="Check Videos", width=50, command=check_videos,
                                      relief="raised",
                                      borderwidth=3, height=5, foreground="white", background="#9494b8")
            check_videos_btn.grid(row=0, column=0, pady=10)

            def update_videos():
                controller.show_frame("UpdateVideos")

            update_videos_btn = Button(button_frame, text="Update Videos", width=50, command=update_videos,
                                       relief="raised",
                                       borderwidth=3, height=5, foreground="white", background="#9494b8")
            update_videos_btn.grid(row=1, column=0, pady=10)

            def create_videos():
                controller.show_frame("CreateVideoList")

            create_videos_btn = Button(button_frame, text="Create Playlist", width=50, command=create_videos,
                                       relief="raised", borderwidth=3, height=5, foreground="white",
                                       background="#9494b8")
            create_videos_btn.grid(row=2, column=0, pady=10)

            def back():
                controller.show_frame("StartPage")

            exit_button = Button(button_frame, text="Exit", command=back, relief="raised", borderwidth=3, width=50,
                                 height=5, foreground="white", background="#9494b8")
            exit_button.grid(row=3, column=0, pady=5)

            bottom_frame = Frame(self, relief="raised", borderwidth=3)
            bottom_frame.pack(fill='x', side="bottom")

            try:
                youtube_icon = PhotoImage(file="images/youtube.png")
                youtube_label = Label(bottom_frame, image=youtube_icon)
                youtube_label.pack(side="left")
                youtube_label.image = youtube_icon

                netflix_icon = PhotoImage(file="images/netflix.png")
                netflix_label = Label(bottom_frame, image=netflix_icon)
                netflix_label.pack(side="left")
                netflix_label.image = netflix_icon

                video_player_icon = PhotoImage(file="images/video-player.png")
                video_player_label = Label(bottom_frame, image=video_player_icon)
                video_player_label.pack(side="left")
                video_player_label.image = video_player_icon

            except FileNotFoundError as fnf_error:
                print(fnf_error)

            def tick():
                current_time = time.strftime("%H:%M").lstrip("0").replace(" 0", " ")
                time_label.config(text=current_time)
                time_label.after(200, tick)

            time_label = Label(bottom_frame, font=("orbitron", 12))
            time_label.pack(side="right")

            tick()
    except:
        messagebox.showinfo(f"Error: could not contruct GUI")


class CheckVideos(Frame):  # current frame so it will be displayed
    def check_video_clicked(self):  # function to get information from selected video
        key = self.input_txt.get()  # get method used to retrieve value entered in input_txt and # assigned to key
        # variable
        name = lib.get_name(key)  # uses method to get name and assign to name variable
        if name is not None:  # enters loop if name variable is not nothing
            director = lib.get_director(key)  # uses method to get director name and store in director variable
            rating = lib.get_rating(key)  # uses method to get rating and store in rating variable
            play_count = lib.get_play_count(key)  # uses method to get play count and store in play_count variable
            video_details = f"{name}\n{director}\nrating: {rating}\nplays: {play_count}"  # video information stored
            # in variable
            set_text(self.video_txt, video_details)  # inserts video_details in video_txt
        else:  # if first condition isnt met
            set_text(self.video_txt, f"Video {key} not found")  # inserts string into video_txt if key isn't found
        self.status_lbl.configure(text="Check Video button was clicked!")  # updates status_lbl with new text

    def list_videos_clicked(self):  # function to list videos
        video_list = lib.list_all()  # uses function to display everything in list and store in variable
        set_text(self.list_txt, video_list)  # inserts list of videos in list_txt
        self.status_lbl.configure(text="List Videos button was clicked!")  # changes text in status_lbl

    try:
        def __init__(self, parent, controller):
            Frame.__init__(self, parent, bg="#3d3d5c")
            self.controller = controller

            heading_label = Label(self, text="Video Player", font=("orbitron", 45, "bold"), foreground="white",
                                  background="#3d3d5c")  # label with font text foreground, background etc
            # declared
            heading_label.pack(pady=25)  # where label is packed

            main_menu_lbl = Label(self, text="check videos for information", font=("orbitron", 15, "bold"),
                                  foreground="white", background="#3d3d5c")  # label with font text foreground,
            # background etc declared
            main_menu_lbl.pack()

            button_frame = Frame(self, bg="#33334d")
            button_frame.pack(fill="both", expand=True)

            list_videos_btn = Button(button_frame, text="List All Videos", command=self.list_videos_clicked,
                                     relief="raised", borderwidth=3, height=2, width=30, foreground="white",
                                     background="#9494b8")  # creates button to list videos and calls function when
            # clicked
            list_videos_btn.grid(row=0, column=0, padx=10, pady=10)  # where button is placed, in row 0, column 0

            enter_lbl = Label(button_frame, text="video search:", font=("orbitron", 20), foreground="white",
                              background="#33334d")  # label with text 'Enter Video Number'
            enter_lbl.grid(row=0, column=1, padx=10, pady=10)

            try:
                self.input_txt = Entry(button_frame, width=10, foreground="white",
                                       background="#9494b8")  # entry field for input
                self.input_txt.grid(row=0, column=2, padx=10, pady=10, ipady=25)  # where entry field is placed
            except ValueError:
                messagebox.showinfo("key must be integer")

            check_video_btn = Button(button_frame, text="Check Video", command=self.check_video_clicked,
                                     relief="raised", borderwidth=3, height=2, width=30, foreground="white",
                                     background="#9494b8")  # calls function when clicked
            check_video_btn.grid(row=0, column=3, padx=10, pady=10)  # where button is placed

            self.list_txt = tkst.ScrolledText(button_frame, width=70, height=30, font=("orbitron", 15), wrap="none",
                                              foreground="white", background="#9494b8")  # shows list of movies
            self.list_txt.grid(row=1, column=0, padx=10, pady=10)  # where list  is placed

            self.video_txt = Text(button_frame, width=40, height=20, wrap="none", foreground="white",
                                  background="#9494b8")  # shows video information
            self.video_txt.grid(row=1, column=3, padx=10, pady=10)  # where text is placed

            self.status_lbl = Label(button_frame, text="", foreground="white",
                                    background="#33334d")  # shows status of most recent action
            self.status_lbl.grid(row=2, column=0, padx=10, pady=10)  # where label is placed

            def back():
                controller.show_frame("Menu")  # function which shows menu frame

            exit_button = Button(button_frame, font=("orbitron", 10), text="Back", command=back, relief="raised",
                                 borderwidth=3, width=30, height=1, foreground="white", background="#9494b8")  #
            # when clicked calls back function
            exit_button.grid(row=2, column=1, pady=5)  # where button is placed

            bottom_frame = Frame(self, relief="raised", borderwidth=3)  # frame made
            bottom_frame.pack(fill='x', side="bottom")  # frame placed at the bottom

            try:
                youtube_icon = PhotoImage(file="images/youtube.png")  # stores image in variable
                youtube_label = Label(bottom_frame, image=youtube_icon)  # stores image variable at the bottom in a
                # variable
                youtube_label.pack(side="left")  # packs label to the left in bottom frame
                youtube_label.image = youtube_icon

                netflix_icon = PhotoImage(file="images/netflix.png")  # stores image in variable
                netflix_label = Label(bottom_frame, image=netflix_icon)  # stores image variable at the bottom in a
                # variable
                netflix_label.pack(side="left")  # packs label to the left in bottom frame
                netflix_label.image = netflix_icon

                video_player_icon = PhotoImage(file="images/video-player.png")  # stores image in variable
                video_player_label = Label(bottom_frame, image=video_player_icon)  # stores image variable at the
                # bottom in a variable
                video_player_label.pack(side="left")  # packs label to the left in bottom frame
                video_player_label.image = video_player_icon

            except FileNotFoundError as fnf_error:
                print(fnf_error)

            # function which displays time in 24 hour format and updates every 200 seconds
            def tick():
                current_time = time.strftime("%H:%M").lstrip("0").replace(" 0", " ")
                time_label.config(text=current_time)
                time_label.after(200, tick)

            time_label = Label(bottom_frame, font=("orbitron", 12))
            time_label.pack(side="right")

            tick()
    except:
        messagebox.showinfo(f"Error: could not contruct GUI")


class UpdateVideos(Frame):

    def update_video_clicked(self):
        try:
            key = self.input_txt.get()
            key2 = self.input_txt2.get()
            name = lib.get_name(key)
            if name is not None:
                director = lib.get_director(key)
                rating = lib.set_rating(key, key2)
                update_csv()
                rating = lib.get_rating(key)
                play_count = lib.get_play_count(key)
                video_details = f"{name}\n{director}\nrating: {rating}\nplays: {play_count}"
                set_text(self.video_txt2, video_details)
            else:
                set_text(self.video_txt2, f"Video {key} not found")
            self.status_lbl.configure(text="Video updated!")

        except:
            print(f"problem in update_video_clicked() function")

    def check_video_clicked(self):  # function to get information from selected video
        key = self.input_txt.get()  # value entered in input_txt assigned to key variable
        name = lib.get_name(key)  # uses method to get name and assign to name variable
        if name is not None:  # enters loop if name variable is not nothing
            director = lib.get_director(key)  # uses method to get director name and store in director variable
            rating = lib.get_rating(key)  # uses method to get rating and store in rating variable
            play_count = lib.get_play_count(key)  # uses method to get play count and store in play_count variable
            video_details = f"{name}\n{director}\nrating: {rating}\nplays: {play_count}"  # video information stored in variable
            set_text(self.video_txt, video_details)  # inserts video_details in video_txt
        else:  # if first condition isnt met
            set_text(self.video_txt, f"Video {key} not found")  # inserts string into video_txt if key isnt found
        self.status_lbl.configure(text="Check Video button was clicked!")  # updates status_lbl

    def list_videos_clicked(self):  # function to list videos
        video_list = lib.list_all()  # uses function to display everything in list and store in variable
        set_text(self.list_txt, video_list)  # inserts list of videos in list_txt
        self.status_lbl.configure(text="List Videos button was clicked!")  # changes text in status_lbl

    def __init__(self, parent, controller):
        try:
            Frame.__init__(self, parent, bg="#3d3d5c")
            self.controller = controller

            heading_label = Label(self, text="Video Player", font=("orbitron", 45, "bold"), foreground="white",
                                  background="#3d3d5c")
            heading_label.pack(pady=25)

            main_menu_lbl = Label(self, text="update video information", font=("orbitron", 15, "bold"),
                                  foreground="white", background="#3d3d5c")
            main_menu_lbl.pack()

            button_frame = Frame(self, bg="#33334d")
            button_frame.pack(fill="both", expand=True)

            enter_lbl = Label(button_frame, text="Enter Video Number", font=("orbitron", 25), foreground="white",
                              background="#33334d")
            enter_lbl.grid(row=0, column=1, padx=10, pady=10)

            enter_lbl2 = Label(button_frame, text="Enter Rating", font=("orbitron", 25), foreground="white",
                               background="#33334d")
            enter_lbl2.grid(row=1, column=1, padx=10, pady=10)

            list_videos_btn = Button(button_frame, text="List All Videos", command=self.list_videos_clicked,
                                     relief="raised", borderwidth=3, height=2, width=30, foreground="white",
                                     background="#9494b8")  # creates button to list videos and calls function when clicked
            list_videos_btn.grid(row=0, column=0, padx=10, pady=10)  # where button is placed, in row 0, column 0

            self.list_txt = tkst.ScrolledText(button_frame, width=50, height=25, font=("orbitron", 15), wrap="none",
                                              foreground="white", background="#9494b8")  # shows list of movies
            self.list_txt.grid(row=1, column=0, padx=10, pady=10)

            self.input_txt = Entry(button_frame, width=10, foreground="white", background="#9494b8")
            self.input_txt.grid(row=0, column=2, padx=10, pady=10, ipady=25)

            self.input_txt2 = Entry(button_frame, width=10, foreground="white", background="#9494b8")
            self.input_txt2.grid(row=1, column=2, padx=10, pady=10, ipady=25)

            check_video_btn = Button(button_frame, text="Check Video", command=self.check_video_clicked,
                                     relief="raised", borderwidth=3, width=30, height=3, foreground="white",
                                     background="#9494b8")  # calls function when clicked
            check_video_btn.grid(row=0, column=3, padx=100, pady=10)

            update_video_btn = Button(button_frame, text="update Video", command=self.update_video_clicked,
                                      relief="raised", borderwidth=3, width=30, height=3, foreground="white",
                                      background="#9494b8")
            update_video_btn.grid(row=1, column=3, padx=100, pady=10)

            self.video_txt = Text(button_frame, width=25, height=10, wrap="none", foreground="white",
                                  background="#9494b8")  # shows video information
            self.video_txt.grid(row=0, column=4, padx=10, pady=10)

            self.video_txt2 = Text(button_frame, width=25, height=10, wrap="none", foreground="white",
                                   background="#9494b8")  # shows video information
            self.video_txt2.grid(row=1, column=4, padx=10, pady=10)

            self.status_lbl = Label(button_frame, text="", foreground="white",
                                    background="#33334d")  # shows status of most recent action
            self.status_lbl.grid(row=2, column=0, padx=10, pady=10)

            def back():
                controller.show_frame("Menu")

            exit_button = Button(button_frame, font=("orbitron", 10), text="Back", command=back, relief="raised",
                                 borderwidth=3, width=30, height=1, foreground="white", background="#9494b8")
            exit_button.grid(row=2, column=1, padx=20, pady=5)

            bottom_frame = Frame(self, relief="raised", borderwidth=3)
            bottom_frame.pack(fill='x', side="bottom")

            try:
                youtube_icon = PhotoImage(file="images/youtube.png")
                youtube_label = Label(bottom_frame, image=youtube_icon)
                youtube_label.pack(side="left")
                youtube_label.image = youtube_icon

                netflix_icon = PhotoImage(file="images/netflix.png")
                netflix_label = Label(bottom_frame, image=netflix_icon)
                netflix_label.pack(side="left")
                netflix_label.image = netflix_icon

                video_player_icon = PhotoImage(file="images/video-player.png")
                video_player_label = Label(bottom_frame, image=video_player_icon)
                video_player_label.pack(side="left")
                video_player_label.image = video_player_icon

            except FileNotFoundError as fnf_error:
                print(fnf_error)

            def tick():
                current_time = time.strftime("%H:%M").lstrip("0").replace(" 0", " ")
                time_label.config(text=current_time)
                time_label.after(200, tick)

            time_label = Label(bottom_frame, font=("orbitron", 12))
            time_label.pack(side="right")

            tick()

        except:
            messagebox.showinfo(f"Error: could not contruct GUI")


class CreateVideoList(Frame):
    def add_to_list_clicked(self):
        try:
            key = self.input_txt.get()
            name = lib.get_name(key)
            if name is not None:
                director = lib.get_director(key)
                rating = lib.get_rating(key)
                play_count = lib.get_play_count(key)
                video_details = f"{name}\n{director}\nrating: {rating}\nplays: {play_count}"
                set_text(self.video_txt, video_details)
                self.playlist.append(key)
                self.write_playlist()
            else:
                set_text(self.video_txt, f"Video {key} not found")
            self.status_lbl.configure(text="Add to play list button was clicked!")
        except:
            print(f"problem in add_to_list() function")

    def show_playlist(self):
        try:
            output = "Playlist:\n"
            for key in self.playlist:
                name = lib.get_name(key)
                play_count = lib.get_play_count(key)
                output += f"{key} {name} [{play_count} plays]\n"
                set_text(self.list_txt, output)
            self.status_lbl.configure(text="Show play list button was clicked!")
        except:
            print(f"problem in show_playlist() function")

    def play_playlist(self):
        try:
            for key in self.playlist:
                lib.increment_play_count(key)
                self.write_playlist()
            self.status_lbl.configure(text="Play the play list button was clicked!")
        except:
            print(f"problem in play_playlist() function")

    def reset_playlist(self):
        try:
            self.playlist.clear()
            set_text(self.list_txt, "Playlist:\n")
            self.status_lbl.configure(text="Reset play list button was clicked!")
        except:
            messagebox.showinfo(f"Error: playlist already empty")

    def list_videos_clicked(self):
        try:
            video_list = lib.list_all()
            set_text(self.list_txt, video_list)
            self.status_lbl.configure(text="List Videos button was clicked!")
        except:
            print(f"problem in list_video_clicked() function")

    def write_playlist(self):
        try:
            output = "Playlist:\n"
            for key in self.playlist:
                name = lib.get_name(key)
                play_count = lib.get_play_count(key)
                output += f"{key} {name} [{play_count} plays]\n"
                set_text(self.list_txt, output)
        except:
            print(f"problem in write_playlist_clicked() function")

    def __init__(self, parent, controller):
        try:
            Frame.__init__(self, parent, bg="#3d3d5c")
            self.controller = controller
            self.playlist = []

            heading_label = Label(self, text="Video Player", font=("orbitron", 45, "bold"), foreground="white",
                                  background="#3d3d5c")
            heading_label.pack(pady=25)

            main_menu_lbl = Label(self, text="create personal play list", font=("orbitron", 15, "bold"),
                                  foreground="white", background="#3d3d5c")
            main_menu_lbl.pack()

            button_frame = Frame(self, bg="#33334d")
            button_frame.pack(fill="both", expand=True)

            list_videos_btn = Button(button_frame, text="List All Videos", command=self.list_videos_clicked,
                                     relief="raised", borderwidth=3, width=30, height=3, foreground="white",
                                     background="#9494b8")
            list_videos_btn.grid(row=0, column=0, padx=10, pady=10)

            enter_lbl = Label(button_frame, text="Enter Video Number", font=("orbitron", 25), foreground="white",
                              background="#33334d")
            enter_lbl.grid(row=0, column=1, padx=10, pady=10)

            self.input_txt = Entry(button_frame, width=10, foreground="white", background="#9494b8")
            self.input_txt.grid(row=0, column=2, padx=10, pady=10, ipady=25)

            add_to_list_btn = Button(button_frame, text="Add to play list", command=self.add_to_list_clicked,
                                     relief="raised", borderwidth=3, width=30, height=3, foreground="white",
                                     background="#9494b8")
            add_to_list_btn.grid(row=0, column=3, padx=10, pady=10)

            self.list_txt = tkst.ScrolledText(button_frame, width=70, height=30, wrap="none", foreground="white",
                                              background="#9494b8")
            self.list_txt.grid(row=1, column=0, padx=10, pady=10)

            self.video_txt = Text(button_frame, width=40, height=20, wrap="none", foreground="white",
                                  background="#9494b8")
            self.video_txt.grid(row=1, column=3, padx=10, pady=10)

            show_list_btn = Button(button_frame, text="Show play list", command=self.show_playlist, relief="raised",
                                   borderwidth=3, width=30, height=3, foreground="white", background="#9494b8")
            show_list_btn.grid(row=2, column=0, padx=10, pady=10)

            play_list_btn = Button(button_frame, text="Play the play list", command=self.play_playlist, relief="raised",
                                   borderwidth=3, width=30, height=3, foreground="white", background="#9494b8")
            play_list_btn.grid(row=2, column=1, padx=10, pady=10)

            reset_list_btn = Button(button_frame, text="Reset play list", command=self.reset_playlist, relief="raised",
                                    borderwidth=3, width=30, height=3, foreground="white", background="#9494b8")
            reset_list_btn.grid(row=2, column=3, padx=10, pady=10)

            self.status_lbl = Label(button_frame, text="", foreground="white", background="#33334d")
            self.status_lbl.grid(row=3, column=0, padx=10, pady=10)

            def back():
                controller.show_frame("Menu")

            exit_button = Button(button_frame, font=("orbitron", 10), text="Back", command=back, relief="raised",
                                 borderwidth=3, width=30, height=1, foreground="white", background="#9494b8")
            exit_button.grid(row=3, column=1, padx=20, pady=5)

            bottom_frame = Frame(self, relief="raised", borderwidth=3)
            bottom_frame.pack(fill='x', side="bottom")

            try:
                youtube_icon = PhotoImage(file="images/youtube.png")
                youtube_label = Label(bottom_frame, image=youtube_icon)
                youtube_label.pack(side="left")
                youtube_label.image = youtube_icon

                netflix_icon = PhotoImage(file="images/netflix.png")
                netflix_label = Label(bottom_frame, image=netflix_icon)
                netflix_label.pack(side="left")
                netflix_label.image = netflix_icon

                video_player_icon = PhotoImage(file="images/video-player.png")
                video_player_label = Label(bottom_frame, image=video_player_icon)
                video_player_label.pack(side="left")
                video_player_label.image = video_player_icon

            except FileNotFoundError as fnf_error:
                print(fnf_error)

            def tick():
                current_time = time.strftime("%H:%M").lstrip("0").replace(" 0", " ")
                time_label.config(text=current_time)
                time_label.after(200, tick)

            time_label = Label(bottom_frame, font=("orbitron", 12))
            time_label.pack(side="right")

            tick()

        except:
            messagebox.showinfo(f"Error: could not contruct GUI")


if __name__ == "__main__":
    app = SampleApp()
    app.mainloop()
